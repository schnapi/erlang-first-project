{% extends "mu_interface.dtl" %}

{% block container %}
    {% verbatim %}
    <script type="text/x-template" id="grid-template">
      <table class="table">
        <thead>
          <tr>
            <th v-for="(item, key) in columns"
              @click="sortBy(key)"
              :class="{ active: sortKey == key }">
              {{ item | capitalize }}
              <span class="arrow" :class="sortOrders[key] > 0 ? 'asc' : 'dsc'">
              </span>
            </th><th></th><th></th>
          </tr>
        </thead>
        <tbody class=" text-center">
          <tr v-for="(entry, index) in filteredData">
            <td v-for="(item, key) in columns">
              <template v-if="item == 'Spol'">
                <template v-if="entry[key] == '0'">
                  Moški
                </template>
                <template v-else>
                  Ženski
                </template>
              </template>
              <template v-else>
                {{entry[key]}}
              </template>
            </td>
            <td><a href="#" v-on:click="$parent.getResults(filteredData[index].username)">Zgodovina odgovorov</a></td>
            <td><button v-on:click="removeItem(index)" class="btn btn-danger" type="button">Odstrani</button></td>
          </tr>
        </tbody>
      </table>
    </script>
    <div class="col-lg-12">
      <div class="row">
        <div class="col-xl-4">
          <h1>Registracija</h1>
          <form id="registration" class="form-horizontal" style="white-space: nowrap;">
              <div v-bind:class="{'form-group': true, 'has-danger': errors.has('username')}">
                  <label class="control-label" for="email">Uporabniško ime:</label>
                  <input id="username" name="username" type="email" class="form-control" placeholder="Email naslov" v-model="username" v-validate="'required|email'">
                  <span class="text-danger" v-if="errors.has('username')">{{errors.first('username')}}</span>
              </div>
              <div v-bind:class="{'form-group': true, 'has-danger': errors.has('password')}">
                  <label class="control-label" for="password">Geslo:</label>
                  <input id="password" name="password" type="password" class="form-control" placeholder="Geslo" v-model="password" v-validate="'required|min:8'">
                  <span class="text-danger" v-if="errors.has('password')">{{errors.first('password')}}</span>
              </div>
              <div v-bind:class="{'form-group': true}">
                <select  v-model="role" class="custom-select">
                  <option value="user" selected>Uporabnik</option>
                  <option value="admin">Administrator</option>
                </select>
              </div>
              <div v-bind:class="{'form-group': true}">
                Spol:
                <label class="radio-inline">
                  <input type="radio" v-model="sex" value="0">Moški
                </label>
                <label class="radio-inline">
                  <input type="radio" v-model="sex" value="1">Ženski
                </label>
              </div>
              <div class="form-group">
                  <button class="btn btn-primary" type="button" v-on:click="registration">Registracija</button>
              </div>
          </form>
        </div>
        <div class="col-xl-8">
          <div id="users" class="p4">
            <div class="form-group mb-10 row">
              <label for="search" class="col-sm-2 control-label">Iskanje:</label>
              <div class="col-sm-10">
                <input name="query" class="form-control" id="search" v-model="searchQuery">
              </div>
            </div>
            <users-grid
              :data="gridData"
              :columns="gridColumns"
              :filter-key="searchQuery">
            </users-grid>
          </div>
        </div>
    </div>
    </div>
    {% endverbatim %}
{% endblock %}

{% block footer_javascript %}
    Vue.use(VeeValidate);
          // register the grid component
    Vue.component('users-grid', {
      template: '#grid-template',
      props: {
        data: Array,
        columns: Object,
        filterKey: String
      },
      data: function () {
        var sortOrders = {}
        for (var key in this.columns)
          sortOrders[key] = 1
        return {
          sortKey: '',
          sortOrders: sortOrders
        }
      },
      computed: {
        filteredData: function () {
          var sortKey = this.sortKey
          var filterKey = this.filterKey && this.filterKey.toLowerCase()
          var order = this.sortOrders[sortKey] || 1
          var data = this.data
          if (filterKey) {
            data = data.filter(function (row) {
              return Object.keys(row).some(function (key) {
                return String(row[key]).toLowerCase().indexOf(filterKey) > -1
              })
            })
          }
          if (sortKey) {
            data = data.slice().sort(function (a, b) {
              a = a[sortKey]
              b = b[sortKey]
              return (a === b ? 0 : a > b ? 1 : -1) * order
            })
          }
          return data
        }

      },
      filters: {
        capitalize: function (str) {
          return str.charAt(0).toUpperCase() + str.slice(1)
        }
      },
      methods: {
        sortBy: function (key) {
          this.sortKey = key
          this.sortOrders[key] = this.sortOrders[key] * -1
        },
        removeItem: function(index) {
          var userdata = JSON.stringify({
            "deleteUser": this.filteredData[index].username
          })
          var self=this
          $.post("/api/registration", userdata, function(data) {
            if (data.error) {alert("Napaka pri brisanju uporabnika!")}
            else {
              ind = self.filteredData[index].id
              self.data.splice(ind, 1)
              alert("Uporabnik uspešno odstranjen")
            }
          })
        }
      }
    })

    var registration = new Vue({
    	el: '#registration',
        data: {
        	username: "",
          password: "",
          role: "user",
          sex: 0
        },
        methods: {
        	registration: function(e) {
            this.$validator.validateAll();
            if (!this.errors.any()) {
              var userdata = JSON.stringify({
                "registration": this.$data
              });
              self=this
              $.post("/api/registration", userdata, function(data) {
                if(data.error)
                  alert(data.error);
                else {
                  alert("Registracija uspela");
                  users.gridData.push(self.$data)
                }
              })
            }
          }
        }
    });

    var users = new Vue({
      el: '#users',
      data: {
        searchQuery: '',
        gridColumns: {username: 'Uporabnik', role:'Privilegij', processingSpeed:'Hitrost procesiranja',  brainCapacity: 'Spominske kapacitete',brainWeight:'Teža možganov', sex: 'Spol'},
        gridData: [
          // { username: 'Chuck Norris', role: "admin", power: Infinity }
        ]
      },
      mounted: function() {
        var userdata = JSON.stringify({
          "get": "usersLastAvgScoresLastEpoch"
        });
        var self=this
        $.post("/api/registration", userdata, function(data) {
          if (data.error) alert(data.error)
          else {
            data.users.forEach(function(item,index){
              if(data.results[item.username] == undefined)
                data.results[item.username] = {brainCapacity:0, brainWeight:0, processingSpeed:0, id:index}
              $.extend(item,data.results[item.username])
            })
            self.gridData = data.users
          }
        })
      },
      methods: {
        getResults: function(username) {
          var userdata = JSON.stringify({
            "getCSV": username
          })
          self=this
          $.post("/api/registration", userdata, function(data) {
            if (data.error) {alert("Napaka pri generiranju datoteke!")}
            else {
              //goToLink(link)
              var link=document.createElement('a');
              document.body.appendChild(link);
              link.href="/"+data ;
              link.click();
            }
          })
        },
      }
    })
{% endblock %}
