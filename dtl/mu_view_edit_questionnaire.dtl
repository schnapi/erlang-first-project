<!DOCTYPE html>
<html>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <link rel="stylesheet" href="static/css/style.css">
  <link rel="stylesheet" href="static/css/modal.css">
  <!-- <script src="https://unpkg.com/vue"></script> -->
  <script src="static/js/vue.js"></script>
  <script src="static/js/utility.js"></script>
  <body>
    {% verbatim %}
    <div class = "container">
      <h1>Uredi vprašalnik</h1>
      <div class="panel-group">
        <div id="questions">
        <modal v-if="showModal" @close="showModal = false">
          <h3 slot="header">Načrtovanje logike</h3>
          <div slot="body">
            <!-- show logic just for testing purposes -->
            {{logic}}
            {{setLogic()}}
            <table class="table">
            <tbody>
              <tr>
                <th>Vprašanje</th>
                <td>Vprašanje {{selected.question}}</td>
              </tr>
              <tr>
                <th>Odgovor</th>
                <td>{{questions[selected.question-1].answers[selected.answer-1].value}}</td>
              </tr>
              <tr>
                <th>Privzeto naslednje vprašanje</th>
                <td>
                  <select class="custom-select" v-model="getSelectedLogic().defaultNextQuestion">
                    <option value=""></option>
                    <option v-for="n in questions.length" :value="n" :selected="n == getSelectedLogic().defaultNextQuestion ? 'true' : ''">Vprašanje {{n}}</option>
                  </select>
                </td>
              </tr>
            </tbody>
            </table>
            <p>
              <button v-on:click="pushRow(getSelectedLogic().conditions,conditionAdd)" class="btn btn-success" type="button">Dodaj naslednje vprašanje</button>
              <button v-on:click="popRow(getSelectedLogic().conditions)" class="btn btn-danger" type="button">Odstrani vprašanje</button>
            </p>
            <div class="row">
              <div class="col-xs-3">Naslednje vprašanje</div>
              <div class="col-xs-5">Pogoji</div>
              <div class="col-xs-3">Logični operator</div>
              <div class="col-xs-1"></div>
            </div>
            <div class="row" v-for="(obj, index) in getSelectedLogic().conditions">
              <div class="col-xs-3">
                <select class="custom-select" v-model="obj.nextQuestion">
                  <option value=""></option>
                  <option v-for="n in questions.length" :value="n">Vprašanje {{n}}</option>
                </select>
              </div>
              <template v-for="(obj1, index1) in obj.questionsAnswers">
                <template v-if="obj1.op!=undefined">
                  <div class="col-xs-3">
                    <select class="custom-select" v-model="obj1.op">
                      <option value=""></option>
                      <option value="and">and</option>
                      <option value="or">or</option>
                    </select>
                  </div>
                  <div class="col-xs-1">
                    <span v-on:click="addRowList(obj.questionsAnswers, index1+1,logicQAadd)" class="add glyphicon glyphicon-plus"></span>
                    <span v-on:click="removeRow(getSelectedLogic().conditions, obj.questionsAnswers, index1)" class="remove glyphicon glyphicon-remove"></span>
                  </div>
                </template>
                <div v-else class="col-xs-5">
                  <select class="custom-select" v-model="obj1.id">
                    <option v-for="n in questions.length" :value="n">Vprašanje {{n}}</option>
                  </select> =
                  <select class="custom-select" v-model="obj1.answer">
                    <option v-for="(answer, index2) in questions[obj1.id-1].answers" :value="index2+1">{{answer.value.substring(0, 20)}}</option>
                  </select>
                </div>
                <div class="col-xs-3" v-if="(index1+1)%2==0 && index1!=obj.questionsAnswers.length-1 "></div>
              </template>
            </div>
          </div>
        </modal>

          <p>Ime vprašalnika:  <input type="text" v-model="questionnaire.name"></p>
          <!-- <questionComp v-for="(question, index) in questions" :text="Vprašalnik" class="panel panel-default question"></questionComp> -->
          <div v-for="(question, index) in questions" class="panel panel-default question">
            <div class="panel-heading" v-on:click="collapseShow(index)">
              <h4 class="panel-title accordion-toggle">
                Vprašanje: <span>{{question.id = index+1}}</span>
              </h4>
              <a v-on:click="removeQuestion(index)">Odstrani</a>
            </div>
            <section :id="'question' + index" style="display:none" class="panel-collapse collapse in panel-body">
              <textarea rows="4" cols="50" v-model="question['question']"></textarea>
              <p><fieldset>
                <input type="hidden" id="MAX_FILE_SIZE" name="MAX_FILE_SIZE" value="300000" />
                <legend>
                  <label class="btn btn-primary btn-file" onclick="triggerClick()">
                  Izberi sliko: <input style="display:none" type="file" id="fileupload" name="fileselect[]" multiple="multiple" accept="image/*" @change="onFileChange(index)" />
                  </label>
                  <span v-if="question['image'] != ''">{{question['image']}}
                  <a href="#" @click="change(index,'image','')">
                    <small><small> <span class="glyphicon glyphicon-remove"></span></small></small>
                  </a></span>
                </legend>
              </fieldset></p>
              <section>
                <p>Tip odgovora:
                  <select v-model="question['answers_type']">
                    <option value="selectOne">Eden pravilni odgovor</option>
                    <option value="selectMulti">Več pravilnih odgovorov</option>
                  </select>
                </p>
                <table class="answers table">
                  <thead><tr><th></th><th>Odgovor</th><th>Točke</th><th>Naslednje vprašanje</th><th></th></tr></thead>
                  <tbody>
                    <tr v-for="(answer, index1) in question['answers']">
                      <td>{{answer.id = index1+1}}.</td>
                      <td><textarea v-model="answer.value"></textarea></td>
                      <td><input type='text' v-model='answer.weight'></td>
                      <td>
                        <button id="show-modal" @click="showModalF(index+1, index1+1)">Logika</button>
                      </td>
                      <td><button v-on:click="removeAnswer(question,index1)" class="btn btn-danger" type="button">Odstrani</button></td>
                    </tr>
                  </tbody>
                </table>
                <button v-on:click="addAnswer(question)">Dodaj odgovor</button>
              </section>
            </section>
          </div>
          <p><button v-on:click="addQuestion()">Dodaj vprašanje</button></p>
          <p><button v-on:click="save()">Shrani vprašalnik</button></p>
        </div>
      </div>
    </div>
    {% endverbatim %}
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
  <script type="text/x-template" id="modal-template">
    <transition name="modal">
      <div class="modal-mask">
        <div class="modal-wrapper">
          <div class="modal-container">
            <div class="modal-header">
              <slot name="header">
                default header
              </slot>
            </div>
            <div class="modal-body">
              <slot name="body">
                default body
              </slot>
            </div>
            <div class="modal-footer">
              <slot name="footer">
                <button class="modal-default-button" v-on:click="close()">
                  OK
                </button>
              </slot>
            </div>
          </div>
        </div>
      </div>
    </transition>
  </script>
  <script>
  Vue.component('modal', {
    template: '#modal-template',
    methods: {
      close: function () {
        this.$emit('close');
        this.$parent.removeEmptyLogic()
      }
    }
  })

  var name = getUrlParam('name');
  var id = getUrlParam('id');

  if(name=="null") name="";
    toggle=true;

  function alertj(obj) {
    alert(JSON.stringify(obj))
  }
  Array.prototype.spliceArray = function(index, n, array) {
    return Array.prototype.splice.apply(this, [index, n].concat(array));
  }

  Array.prototype.clone = function() {
    return JSON.parse(JSON.stringify(this))
  }
  Array.prototype.peekBack = function() {
    return this[this.length-1]
  }
  function clone(obj) {
    return JSON.parse(JSON.stringify(obj))
  }

  var VueQuestions = new Vue({
    el: '#questions',
    data: {
      questionnaire: { id: id, name: name },
      questions: [],
      showModal: false,
      selected: {question:1, answer: 1},
      logicQAadd: [{ id: 1, answer: 1 }, { op: "" }],
      conditionAdd:{
        nextQuestion: 3,
        questionsAnswers: [{ id: 1, answer: 1 }, { op: "" }]
      },
      logicAdd: {
        defaultNextQuestion: 2,
        conditions: []
      },
      logic: {}
    },
    mounted: function() {
      var userdata = JSON.stringify({
        "get": this.questionnaire.id
      });
      var self=this
      $.post("/api/edit_questionnaire", userdata, function(data) {
        // alert(JSON.stringify(data))
        if (!data) {alert("Napaka pri branju podatkov!");}
        else {
          data.questions.forEach(function(question) {
            if (question['answers'] != "undefined") question['answers'] = JSON.parse(question['answers'])
            else question['answers']=[]
            self.questions.push(question)
          })
          self.logic = data.logic
        }
      })
    },
    methods: {
      alertj: function(obj) {
        alert(JSON.stringify(obj))
      },
      removeLogic(selector) {
        delete this.logic[selector]
      },
      removeEmptyLogic: function() {
        selectedLogic = this.getSelectedLogic()
        // alert(selectedLogic.defaultNextQuestion == this.selected.question+1 )
        if(selectedLogic.defaultNextQuestion == this.selected.question+1 && selectedLogic.conditions[0] == undefined)
          this.removeLogic('qa_'+(this.selected.question)+'_'+(this.selected.answer))
      },
      getSelectedLogic: function() {
        return this.logic['qa_'+(this.selected.question)+'_'+(this.selected.answer)]
      },
      setLogic: function() {
        if (this.getSelectedLogic() == undefined) {
          copy = clone(this.logicAdd); copy.defaultNextQuestion = this.selected.question+1;
          this.$set(this.logic,  'qa_'+(this.selected.question)+"_"+(this.selected.answer), copy)
        }
      },
      showModalF: function(i1,i2) {
        this.selected = {question:i1, answer: i2}
        this.showModal=true
      },
      addRowList: function(obj, index, listToAdd) {
        listToAdd.clone().forEach(function(val, i) {
          obj.splice( index+i, 0, val);
          // obj.push(val)
        })
      },
      addRow: function(obj, index, item) {
        obj.splice( index, 0, clone(item));
      },
      pushRow: function(obj, item) {
        this.addRow(obj, obj.length, item)
      },
      removeRow: function(conditions, obj, index) {
        if(obj.length==2) {
          conditions.pop()}
        else obj.splice( index-1, 2 );
      },
      popRow: function(obj) {
        obj.pop()
      },
      collapseShow: function (index) {
        if (!toggle) {
          toggle=true;
          return;
        }
        // alert(this.$refs.list[index].outerHTML)
        $("#question"+index).slideToggle();
        $(event.currentTarget).find(".accordion-toggle").toggleClass("collapsed")
      },
      removeQuestion: function (index) {
        toggle=false;
        Vue.delete(this.questions, index);
      },
      addQuestion: function() {
        this.questions.push({
          id: '',
          question: '',
          image: '',
          answers_type: 'selectOne',
          answers: [{id: "", value: "", weight: ""}]
        });
      },
      addAnswer: function(question) {question.answers.push({});},
      removeAnswer: function(question, index) {Vue.delete(question.answers, index)},
      save: function() {
        var userdata = JSON.stringify({
          "questionnaire": this.questionnaire,
          "questions": this.questions,
          "logic": this.logic
        });
        self=this;
        $.post("/api/edit_questionnaire", userdata, function(data) {
          if(data.error) alert("Prišlo do je napake, podatki niso vnešeni");
          else {
            self.questionnaire.id=data
            window.history.replaceState(null, "test", location.protocol + '//' + location.host + location.pathname+"?id="+self.questionnaire.id+"&name="+self.questionnaire.name)
            alert("Ustrezno vnešeni podatki!");
          }
        })
      },
      change(index,object,text) {
        this.questions[index][object] = text;
      },
      onFileChange(index) {
        var files = event.target.files || event.dataTransfer.files;
        if (!files.length)
          return;
        this.questions[index]['image'] = files[0].name
        // this.createImage(files[0],index);
      },
      // createImage(file,index) {
      //   var image = new Image();
      //   var reader = new FileReader();
      //
      //   reader.onload = (e) => {
      //     imageRef = e.target.result;
      //   };
      //   reader.readAsDataURL(file);
      // },
    }
  })

  function removeText() {
    $(this).prev("input").trigger('click');
  }
  function triggerClick() {
    $(this).children("input").trigger('click');
  }
  </script>
  </body>

</html>
