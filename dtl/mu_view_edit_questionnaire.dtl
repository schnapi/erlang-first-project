{% extends "mu_interface.dtl" %}

{% block container %}
  {% verbatim %}
    <div style="position:fixed; right:3px; z-index:5555">
      <button class="btn btn-success m-2 pull-right" onclick="VueQuestions.save()">Shrani vprašalnik</button> <br>
      <button class="btn bg-blue m-2 pull-right" onclick="VueQuestions.addQuestion()">Dodaj vprašanje</button> <br>
      <button class="btn bg-gold m-2 pull-right" onclick="VueQuestions.showModalGalleryF()">Uredi galerijo</button>
    </div>
    <div id="accordion" role="tablist" aria-multiselectable="true">
      <div id="questions">
        <modal v-if="showModalLogic" @close="showModalLogic = false">
            <h3 slot="header">Načrtovanje logike</h3>
            <div slot="body">
              <!-- show logic just for testing purposes -->
              {{loadtest()}}
              <table class="table">
              <tbody>
                <tr>
                  <th>Vprašanje</th>
                  <td>Vprašanje {{selected.question}}</td>
                </tr>
                <tr>
                  <th>Odgovor</th>
                  <td>{{questions[selected.question-1].answers[selected.answer-1].value}}</td>
                </tr>
                <tr>
                  <th>Privzeto naslednje vprašanje</th>
                  <td>
                    <select class="custom-select" v-model="getSelectedLogic().defaultNextQuestion">
                      <option value="">Zaključi vprašalnik</option>
                      <option v-for="n in questions.length" :value="n" :selected="n == getSelectedLogic().defaultNextQuestion ? 'true' : ''">Vprašanje {{n}}</option>
                    </select>
                  </td>
                </tr>
              </tbody>
              </table>
              <p>
                <button v-on:click="pushRow(conditionAdd[0])" class="btn btn-success" type="button">Pojdi na vprašanje</button>
                <button v-on:click="popRow(getSelectedLogic().conditions)" class="btn btn-danger" type="button">Odstrani</button>
              </p>
              <div class="row w-100 text-center row-eq-height">
                <div class="col-3">Pojdi na vprašanje</div>
                <div class="col-5">Pogoji</div>
                <div class="col-3">Logični operator</div>
                <div class="col-1">&#8203;</div>
              <div class="row w-100 text-center row-eq-height" style="border: 1px solid #ddd;" v-for="(obj, index) in getSelectedLogic().conditions">
                <div class="col-3">
                  <select class="custom-select" v-model="obj.nextQuestion">
                    <option value="">Zaključi vprašalnik</option>
                    <option v-for="n in questions.length" :value="n">Vprašanje {{n}}</option>
                  </select>
                </div>
                <template v-for="(obj1, index1) in obj.condition">
                  <template v-if="obj1.op!=undefined">
                    <div class="col-3">
                      <select class="custom-select" v-model="obj1.op">
                        <option value=""></option>
                        <option value="and">in</option>
                        <option value="or">ali</option>
                      </select>
                    </div>
                    <div class="col-1">
                      <span v-on:click="addRowList(obj.condition, index1+1)" class="add fa fa-plus"></span>
                      <span v-on:click="removeRow(getSelectedLogic().conditions, obj.condition, index1)" class="remove fa fa-remove"></span>
                    </div>
                  </template>
                  <div v-else class="col-5">
                    <button @click="selectParentheses(obj1,'p1','(',$event)" type="button" style="padding: 1px 6px" class="btn btn-primary" v-bind:class="{ disabled: ifExistVal(obj1,'p1') }">(</button>
                    <select class="custom-select" v-model="obj1.id">
                      <option v-for="n in questions.length" :value="n">Vprašanje {{n}}</option>
                    </select> =
                    <select class="custom-select" v-model="obj1.answer">
                      <option v-for="(answer, index2) in questions[obj1.id-1].answers" :value="index2+1">{{answer.value.substring(0, 20)}}</option>
                    </select>
                    <button @click="selectParentheses(obj1,'p2',')',$event)" type="button" style="padding: 1px 6px"  class="btn btn-primary" v-bind:class="{ disabled: ifExistVal(obj1,'p2') }">)</button>
                  </div>
                  <div class="offset-3" v-if="(index1+1)%2==0 && index1!=obj.condition.length-1 "></div>
                </template>
              </div>
            </div>
            </div>
          </modal>

          <modal v-if="showModalBrains" id="modalGallery" @close="showModalBrains = false">>
            <div slot="header">
              <div class="d-flex justify-content-end">
                <div class="mr-auto"> <h3>Možganček reče:</h3></div>
                <button class="mx-2 pull-right" v-on:click="addBrainMotivation()">Dodaj možgančka</button>
                <button class="mx-2 pull-right" v-on:click="popRow(questions[selected.question-1].answers[selected.answer-1].brainMotivations)">Izbriši zadnjo motivacijo</button>
              </div>
            </div>
            <div slot="body">
              <div class="row">
                <div class="col-9">Tukaj lahko dodate možgančke. Primer za maksimalne točke: <strong>možganček se prikaže, ko imamo manj ali enako točk od maksimalnih.</strong> To pomeni, če imamo maksimalne točke nastavljene na 2 in dosežemo 3 točke se ta možganček ne bo prikazal! Prioriteta pomeni, če želimo prikazati možgančke eden za drugim!</div>
                <div class="col-1">Prioriteta</div>
                <div class="col-2 form-check">
                  <label class="form-check-label">Maksimalne točke</label>
                  <input class="form-check-input" type="checkbox" v-model="questions[selected.question-1]['flagMaxPoints']">
                </div>
              </div>
              <div class="form-group row" v-for="(obj, index) in questions[selected.question-1].answers[selected.answer-1].brainMotivations">
                <div class="col-9"><textarea class="form-control" rows="5" v-model="obj.text"></textarea></div>
                <div class="col-1"><input type="text" class="form-control" v-model="obj.special_id"></div>
                <div class="col-2"><input type="text" class="form-control" v-model="obj.min_score" :disabled="questions[selected.question-1]['flagMaxPoints'] == true ? false : true"></div>
              </div>
            </div>
            <div slot="footer">
              <button class="modal-default-button" v-on:click="cloneToAnswers()">
                OK
              </button>
            </div>

          </modal>

          <modal v-if="showModalGallery" id="modalGallery">
            <div slot="header" style="width:inherit">
              <div class="d-flex justify-content-end"  style="position:fixed; width:inherit; z-index: 5555; background:white; padding: 15px; margin-top: 15px; border-bottom: solid 1px #eceeef;">
                <div class="mr-auto"> <h3>Pregled galerije</h3></div>
                <input type="hidden" id="MAX_FILE_SIZE" name="MAX_FILE_SIZE" value="10000" />
                <label class="btn btn-success btn-file" onclick="triggerClick()">
                  Dodaj sliko<input style="display:none" type="file" name="fileselect[]" multiple="multiple" accept="image/*" @change="onFileChange(index,$event)" />
                </label>
                <button class="btn btn-danger" v-on:click="deleteSelImages()">Izbriši slike</button>
                <span class="fa fa-remove close mx-2" v-on:click="close()"></span>
              </div>
                <div class="d-flex justify-content-end" style="visibility:hidden" >
                  <div class="mr-auto"> <h3>Pregled galerije</h3></div>
                  <button class="btn btn-success" v-on:click="deleteSelImages()">Dodaj sliko</button>
                  <button class="btn btn-danger" v-on:click="deleteSelImages()">Izbriši slike</button>
                  <span class="fa fa-remove close mx-2" v-on:click="close()"></span>
                </div>
            </div>
            <div slot="body" class="row">
              <div v-for="(file, index) in filesManager.files" class="img-thumbnail d-inline-block mx-2 my-4" v-on:click="selectImage(index,$event)" style="width:100px">
                <img :src="encodeURI(filesManager.folder+file)" class="thumbnail" style="width:100%">
                <div class="caption text-center">{{file}}</div>
              </div>
            </div>
            <div slot="footer"></div>
          </modal>

        <div class="form-group row" v-bind:class="{'form-group': true, 'has-danger': errors.has('password')}">
          <div class="col-sm-10">
            <label class="control-label" for="ime vprašalnika">Ime vprašalnika:</label>
            <input type="text" id="ime vprašalnika" name="ime vprašalnika" class="form-control" v-model="questionnaire.name" v-validate="'required'">
            <span class="text-danger" v-if="errors.has('ime vprašalnika')">{{errors.first('ime vprašalnika')}}</span>
          </div>
        </div>
        <div class="form-group row">
          <div class="col-sm-3">
            <label class="control-label" for="maksimalna hitrost procesiranja">Maksimalna hitrost procesiranja:</label>
            <input type="text" id="maksimalna hitrost procesiranja" name="maksimalna hitrost procesiranja" class="form-control" v-model="questionnaire.max_processingSpeed" v-validate="'required|numeric'">
            <span class="text-danger" v-if="errors.has('maksimalna hitrost procesiranja')">{{errors.first('maksimalna hitrost procesiranja')}}</span>
          </div>
          <div class="col-sm-3">
            <label class="control-label" for="maksimalne spominske kapacitete">Maksimalne spominske kapacitete:</label>
            <input type="text" id="maksimalne spominske kapacitete" name="maksimalne spominske kapacitete" class="form-control" v-model="questionnaire.max_brainCapacity" v-validate="'required|numeric'">
            <span class="text-danger" v-if="errors.has('maksimalne spominske kapacitete')">{{errors.first('maksimalne spominske kapacitete')}}</span>
          </div>
          <div class="col-sm-3">
            <label class="control-label" for="maksimalna teža možganov">Maksimalna teža možganov:</label>
            <input type="text" id="maksimalna teža možganov" name="maksimalna teža možganov" class="form-control" v-model="questionnaire.max_brainWeight" v-validate="'required|numeric'">
            <span class="text-danger" v-if="errors.has('maksimalna teža možganov')">{{errors.first('maksimalna teža možganov')}}</span>
          </div>
          <div class="col-sm-2 form-check">
            <label class="form-check-label">Točkovanje vključeno</label>
            <input class="form-check-input form-control" style="height:2rem" type="checkbox" v-model="questionnaire.scoring">
          </div>
        </div>
        <!-- <div class="form-group row">
          <label class="col-5 col-form-label col-form-label-sm" for="qImageSel">Minimalno število točk, da se uporabniku odklene naslednji vprašalnik:</label>
          <div class="col-7">
            <input type="text" class="form-control" v-model="questionnaire." id="qImageSel">
          </div>
        </div> -->
        <draggable v-model="questions" class="dragArea">
          <div v-for="(question, index) in questions" class="card question panel panel-default">
            <div class="card-header panel-heading" role="tab">
              <a data-toggle="collapse" data-parent="#accordion" :href="'#question' + index" aria-expanded="true" :aria-controls="'question' + index">
                <h4>Vprašanje:<span>{{question.id = index+1}}</span></h4>
              </a>
              <a v-on:click="removeQuestion(index)">Odstrani</a>
            </div>
            <section :id="'question' + index" class="collapse card-block panel-body" role="tabpanel" :aria-labelledby="'question' + index">
              <div class="form-group">
                <textarea class="form-control" rows="5" :id="'vprašanje'+(index+1)" :name="'vprašanje'+(index+1)" v-model="question['question']" v-validate="'required'"></textarea>
                <span class="text-danger" v-if="errors.has('vprašanje'+(index+1))">{{errors.first('vprašanje'+(index+1))}}</span>
              </div>
              <div class="row">
                <div class="col-sm-2">
                  <button class="btn btn-success" v-on:click="showModalGallerySelectable(index)">Izberi sliko</button><br>
                  <a v-if="question['image'] != ''" @click="removeImage1(index)">Odstrani sliko</a>
                </div>
                <div class="col-sm-9"><input class="form-control" type="text" v-model="question['image']"></div>
              </div>
              <div class="form-group">
                <!-- <progress style="width:100%" v-if="progressBars[index].max!=progressBars[index].value" :max="progressBars[index].max" :value="progressBars[index].value"></progress> -->
              </div>
                <br>
                <p>Tip odgovora:
                  <select v-model="question['answers_type']">
                    <option value="selectOne">Eden pravilni odgovor</option>
                    <option value="textarea">Vnos teksta</option>
                    <!-- <option value="selectMulti">Več pravilnih odgovorov</option> -->
                    <option value="motivation">Oblaček MocenUm</option>
                  </select>
                </p>
                <template v-if="question['answers_type'] == 'selectOne'">
                  <table class="answers table">
                    <thead><tr><th></th><th>Odgovor</th><th v-if="questionnaire.scoring" align="center">Točke</th><th>Ostalo</th><th></th></tr></thead>
                    <tbody>
                      <template v-for="(answer, index1) in question['answers']">
                        <tr>
                          <td style="width:1px">{{answer.id = index1+1}}.</td>
                          <td class="h-100">
                            <textarea class="form-control h-100" rows="5" :id="'odgovor'+(index+1)+(index1+1)" :name="'odgovor'+(index+1)+(index1+1)" v-model="answer.value" v-validate="'required'"></textarea>
                            <span class="text-danger" v-if="errors.has('odgovor'+(index+1)+(index1+1))">{{errors.first('odgovor'+(index+1)+(index1+1))}}</span>
                          </td>
                          <td v-if="questionnaire.scoring" style="width:1px">
                            Hitrost procesiranja: <input class="form-control" type='text' value="1" v-model='answer.processingSpeed' :id="'hitrost procesiranja'+(index+1)+(index1+1)" :name="'hitrost procesiranja'+(index+1)+(index1+1)" v-validate="'required|numeric'">
                            <span class="text-danger" v-if="errors.has('hitrost procesiranja'+(index+1)+(index1+1))">{{errors.first('hitrost procesiranja'+(index+1)+(index1+1))}}</span> <br>
                            Spominske kapacitete: <input class="form-control" type='text' value="1" v-model='answer.brainCapacity' :id="'spominske kapacitete'+(index+1)+(index1+1)" :name="'spominske kapacitete'+(index+1)+(index1+1)" v-validate="'required|numeric'">
                            <span class="text-danger" v-if="errors.has('spominske kapacitete'+(index+1)+(index1+1))">{{errors.first('spominske kapacitete'+(index+1)+(index1+1))}}</span> <br>
                            Teža možganov: <input class="form-control" type='text' value="1" v-model='answer.brainWeight' :id="'teža možganov'+(index+1)+(index1+1)" :name="'teža možganov'+(index+1)+(index1+1)" v-validate="'required|numeric'">
                            <span class="text-danger" v-if="errors.has('teža možganov'+(index+1)+(index1+1))">{{errors.first('teža možganov'+(index+1)+(index1+1))}}</span> <br>
                          </td>
                          <td style="width:1px">
                            <button class="w-100 m-2" @click="showModalLogicF(index+1, index1+1)">Logika</button>
                            <button class="w-100 m-2" @click="showModalBrainsF(index+1, index1+1)">Dodaj možgančka</button>
                          </td>
                          <td style="width:1px"><button v-on:click="removeAnswer(question,index1)" class="btn btn-danger" type="button">Odstrani</button></td>
                        </tr>
                        <tr>
                          <td colspan="5">
                            <div class="row">
                              <div class="col-sm-3">
                                <button class="btn btn-success" v-on:click="showModalGallerySelectable(index,index1)">Izberi sliko</button><br>
                                <a v-if="answer['answerImage'] != ''" @click="removeImage2(index,index1)">Odstrani sliko</a>
                              </div>
                              <div class="col-sm-9"><input class="form-control" type="text" v-model="answer['answerImage']"></div>
                            </div>
                          </td>
                        </tr>
                      </template>
                    </tbody>
                  </table>
                  <button v-on:click="addAnswer(question)">Dodaj odgovor</button>
                </template>
              </section>
            </section>
          </div>
        </draggable>
      </div>
    </div>

    <script type="text/x-template" id="modal-template">
      <transition name="modal">
        <div class="modal-mask">
          <div class="modal-wrapper">
            <div class="modal-container">
              <div class="modal-header" style="width: inherit;">
                <slot name="header">
                </slot>
              </div>
              <div class="modal-body">
                <slot name="body">
                  default body
                </slot>
              </div>
              <div class="modal-footer">
                <slot name="footer">
                  <button class="modal-default-button" v-on:click="$emit('close')">
                    OK
                  </button>
                </slot>
              </div>
            </div>
          </div>
        </div>
      </transition>
    </script>
    {% endverbatim %}
{% endblock %}

{% block footer_javascript %}

function escape (val) {
    if (typeof(val)!="string") return val;
    return val
      .replace(/[\"]/g, '')
      .replace(/[\\]/g, '')
      .replace(/[\/]/g, '')
      .replace(/[\b]/g, '')
      .replace(/[\f]/g, '')
      .replace(/[\n]/g, '\\n')
      .replace(/[\r]/g, '')
      .replace(/[\t]/g, '')
    ;
}
  var name = getUrlParam('name');
  var id = getUrlParam('id');
  var scoring = getUrlParam('scoring')==0?false:true;
  var max_processingSpeed = parseInt(getUrlParam('max_processingSpeed'));
  var max_brainCapacity = parseInt(getUrlParam('max_brainCapacity'));
  var max_brainWeight = parseInt(getUrlParam('max_brainWeight'));
  if(!Number.isInteger(max_processingSpeed)) max_processingSpeed=0
  if(!Number.isInteger(max_brainCapacity)) max_brainCapacity=0
  if(!Number.isInteger(max_brainWeight)) max_brainWeight=0

  if(name=="null") name="";

  Vue.use(VeeValidate);

  Vue.component('modal', {
    template: '#modal-template'
  })
  var VueQuestions = new Vue({
    el: '#questions',
    data: {
      questionnaire: { id: id, name: name, scoring: scoring, max_brainCapacity: max_brainCapacity, max_brainWeight: max_brainWeight, max_processingSpeed: max_processingSpeed},
      questions:  [],
      showModalLogic: false, showModalGallery: false, showModalBrains: false,
      selectableImage: undefined,
      selected: {question:1, answer: 1},
      logicQAadd: [{ p1: "", id: 1, answer: 1, p2: "" }, { op: "" }],
      conditionAdd:[{
        nextQuestion: 3,
        condition: [{ p1: "", id: 1, answer: 1, p2: "" }, { op: "" }]
      }],
      progressBars: [],
      files: [],
      filesManager: [],
      removeFilesInd: [],
      removeFilesClassList: []
    },
    mounted: function() {
      var userdata = JSON.stringify({
        "get": this.questionnaire.id
      });
      var self=this
      $.post("/api/edit_questionnaire", userdata, function(data) {
        // alert(JSON.stringify(data))
        if (data.error) {alert("Napaka pri branju podatkov!");}
        else {
          if(data =="") return false;
          data.forEach(function(question) {
            if (question['answers'] != "undefined") {
              try{
                question['flagMaxPoints'] = false
                question['answers'] = JSON.parse(question['answers'])
              } catch(exx) {
                try{
                  question['answers'] = JSON.parse(question['answers'].replace(/[\n]/g, '\\n'))
                  alertj("Napako smo delno rešili s tem da smo zbrisali nekatere prepovedane znake!"+ question['answers'])
                } catch(exx) {
                  alertj("Napaka pri parsanju: vnos prepovedanih znakov: "+ question['answers'])
                }
              }
            }
            else question['answers']=[]
            self.questions.push(question)
            self.progressBars.push({max: 0, value: 0})
          })
        }
      })
    },
    methods: {
      alertj: function(obj) {
        alertj(obj)
      },
      ifExistVal: function(obj,para) {
        if(obj[para] == "") return true
        return false
      },
      close: function () {
        this.selectableImage = undefined;
        this.showModalGallery = false
        this.removeFilesInd=[]
        this.removeFilesClassList=[]
      },
      deleteSelImages() {
        removeFiles = []
        var self=this
        this.removeFilesInd.forEach(function(index){
          removeFiles.push(self.filesManager.folder+self.filesManager.files[index])
        })
        // alertj(removeFiles)
        var data = JSON.stringify({
          removeFiles: removeFiles
        });
        $.post("/api/edit_questionnaire", data, function(data) {
          if(data.error) alert(data.error)
          else {
            // alert(self.removeFilesClassList)
            // alert(self.removeFilesInd)
            self.removeFilesInd.forEach(function(ind, index){
              if(data[index] != "ok") alert(self.filesManager.files[index]+" ni bilo mogoče izbrisati!\n"+el)
              else {
                self.filesManager.files[ind] = undefined
              }
              self.removeFilesClassList[index].toggle('active')
            })
            filesManager = []
            self.filesManager.files.forEach(function(el){
              if(el !== undefined) filesManager.push(el)
            })
            self.filesManager.files = filesManager
            self.removeFilesClassList= []
            self.removeFilesInd = []
          }
        })
      },
      selectImage(index,event) {
        if(this.selectableImage != undefined) {
          ind1= this.selectableImage[0], ind2=this.selectableImage[1];
          if(ind2==-1) {
            this.questions[ind1]['image'] = this.filesManager.files[index]
          }
          else this.questions[ind1].answers[ind2]['answerImage'] = this.filesManager.files[index]
          this.close()
          return;
        }
        // ind = myArray.findIndex(x => x.question_id === index+1 && x.questionnaire_id === self.questionnaire.id)
        ind = this.removeFilesInd.indexOf(index)
        if(ind == -1) {
          this.removeFilesInd.push(index);
          this.removeFilesClassList.push(event.currentTarget.classList);
        }
        else {
          this.removeFilesInd.splice(ind,1)
          this.removeFilesClassList.splice(ind,1)
        }
        event.currentTarget.classList.toggle('active')
      },
      selectParentheses: function(obj,para,p,event) {
        event.target.classList.toggle('disabled')
        if(obj[para] == ""){
          obj[para]=p
        }
        else{
          obj[para]=""
        }
        // alertj(obj)
      },
      getSelectedLogic: function() {
        return this.questions[this.selected.question-1].answers[this.selected.answer-1]
      },
      showModalLogicF: function(i1,i2) {
        this.selected = {question:i1, answer: i2}
        this.showModalLogic=true
      },
      showModalBrainsF: function(i1,i2) {
        this.selected = {question:i1, answer: i2}
        this.showModalBrains=true;
      },
      showModalGallerySelectable(ind1, ind2=-1) {
        this.selectableImage = [ind1, ind2];
        this.showModalGalleryF()
      },
      showModalGalleryF: function() {
        var data = JSON.stringify({
          "getAllFiles": ""
        });
        var self=this
        $.post("/api/edit_questionnaire", data, function(data) {
          if (data.error) {
            alert(data.error);alert("Napaka pri branju podatkov!");}
          else {
            self.filesManager = data
            self.showModalGallery=true;
          }
        })
      },
      addRowList: function(obj, index) {
        if(obj[index-1].op == "")
          obj[index-1].op = "and"
        this.logicQAadd.clone().forEach(function(val, i) {
          obj.splice( index+i, 0, val);
          // obj.push(val)
        })
        if(index+2 != obj.length && obj[index+1].op == "")
          obj[index+1].op = "and"
      },
      addRow: function(obj, index, item) {
        obj.splice( index, 0, clone(item));
      },
      loadtest() {
        obj = this.getSelectedLogic().defaultNextQuestion;
        if (obj == undefined) {
          this.$set(this.getSelectedLogic(), "defaultNextQuestion", this.selected.question+1)
        }
      },
      pushRow: function(item) {
        obj = this.getSelectedLogic().conditions;
        if (obj == undefined) {
          copy = clone(this.conditionAdd);
          this.$set(this.getSelectedLogic(), "conditions", copy)
        } else {
          this.addRow(obj, obj.length, item)
        }
      },
      removeRow: function(conditions, obj, index) {
        if(obj.length==2) {
          conditions.pop()}
        else obj.splice( index-1, 2 );
      },
      popRow: function(obj) {
        obj.pop()
      },
      removeQuestion: function (index) {
        Vue.delete(this.questions, index);
      },
      addQuestion: function() {
        this.questions.push({
          id: '',
          question: '',
          image: '',
          answers_type: 'selectOne',
          answers: [],
          folder: ""
        });
      },
      cloneToAnswers() {
        if(this.questions[this.selected.question-1]['flagMaxPoints'] == true) {
          res = confirm("Ali želite, da veljajo pogoji maksimalne točke za vse odgovore?")
          if(res) {
            temp = this.questions[this.selected.question-1].answers[this.selected.answer-1].brainMotivations
            this.questions[this.selected.question-1].answers.forEach(function(item,index) {
              item.brainMotivations = clone(temp);
            });
          }
        }
        this.showModalBrains = false;
      },
      addAnswer: function(question) {
        question.answers.push({brainCapacity:"0",brainWeight:"0",processingSpeed:"0",});
        self = this
        if(question.answers.length>0 && question.answers[0].brainMotivations!= undefined)
          for(index = 0; index< question.answers[0].brainMotivations.length;index++) {
            item=question.answers[0].brainMotivations[index]
            if(item.min_score > 0)
            {
                res = confirm("V odgovorih pri možgančkih so zaznane maksimalne točke! Ali želite, da veljajo pogoji maksimalne točke za vse odgovore?")
                if(res) {
                  temp = question.answers[index].brainMotivations
                  question.answers.forEach(function(item,index1) {
                    self.$set(question.answers[index1], "brainMotivations", clone(temp))
                  });
                }
                return false;
            }
          }
      },
      removeAnswer: function(question, index) {Vue.delete(question.answers, index)},
      addBrainMotivation() {
        if(this.getSelectedLogic().brainMotivations == undefined)
          this.$set(this.getSelectedLogic(), "brainMotivations", [])
        this.getSelectedLogic().brainMotivations.push({text: "Možganček reče:", special_id: 1, min_score: 0})
      },
      save: function() {
        this.$validator.validateAll();
        if (!this.errors.any()) {
          // alertj(this.questions)
          this.questionnaire.scoring = + this.questionnaire.scoring //convert boolean to number

          if(this.questions != undefined)
            this.questions.forEach(function(item) {
              if(item.answers != undefined)
                item.answers.forEach(function(item1) {
                  item1.value = escape(item1.value)
                  if(item1.brainMotivations != undefined)
                    item1.brainMotivations.forEach(function(item2) {
                      item2.text = escape(item2.text)
                    })
                });
            });
          var userdata = JSON.stringify({
            "questionnaire": this.questionnaire,
            "questions": this.questions
          });
          console.log(userdata);
          self=this;
          $.post("/api/edit_questionnaire", userdata, function(data) {
            if(data.error) alert("Prišlo do je napake, podatki niso vnešeni");
            else {
              self.questionnaire.id=data
              window.history.replaceState(null, "test", location.protocol + '//' + location.host + location.pathname+"?id="+self.questionnaire.id+"&name="+self.questionnaire.name+"&scoring="+self.questionnaire.scoring+"&max_processingSpeed="+self.questionnaire.max_processingSpeed+"&max_brainWeight="+self.questionnaire.max_brainWeight+"&max_brainCapacity="+self.questionnaire.max_brainCapacity)
              alert("Ustrezno vnešeni podatki!");
              location.reload();
            }
          })
        }
        else {
          num = 0, index=0;
          self=this;
          $(".collapse").on('shown.bs.collapse', function(){
            index+=1;
            if(index==num) {
              var link=document.createElement('a');
              document.body.appendChild(link);
              link.href="#"+self.errors.errors[0].field ;
              link.click();
              document.body.removeChild(link);
            }
          });
          num=$('.panel-body:not(".in")').length;
          if(num==0) {

            var link=document.createElement('a');
            document.body.appendChild(link);
            link.href="#"+self.errors.errors[0].field ;
            link.click();
            document.body.removeChild(link);
          }
          else
            $('.panel-body:not(".in")').collapse('show');
        }
      },
      removeImage1(index){
        this.questions[index]['image'] = "";
      },
      removeImage2(index,index2){
        this.$set(this.questions[index].answers[index2], 'answerImage', "")
      },
      removeImage3(index){
        fileName = this.questions[index]['image']
        folderName = this.questions[index]['folder']
        this.questions[index]['image'] = ""
        var data = JSON.stringify({
          getConflicts: fileName,
          folder:folderName
        });
        self = this
        $.post("/api/edit_questionnaire", data, function(data) {
          if(data.error) alert(data.error)
          else {
            // ind = myArray.findIndex(x => x.question_id === index+1 && x.questionnaire_id === self.questionnaire.id)
            text="\n"
            if(data!="") {
              data.forEach(function(obj){
                if(obj.questionnaire_id != self.questionnaire.id || obj.question_id != index+1) {
                  text+="\nVprašalnik številka: "+obj.questionnaire_id+"; Vprašanje številka: "+obj.question_id;
                }
              })
              if(text != "\n") if(!confirm("To sliko uporablja več vprašanj. Če želite sliko odstraniti iz vseh vprašanj pritisnite potrdi, drugače pritisnite gumb prekliči!?"+text)) return false;
            }
            var data = JSON.stringify({
              removeFiles: [folderName+fileName]
            });
            $.post("/api/edit_questionnaire", data, function(data) {
              if(data.error) {
                if(data.error=="enoent") alert("Ta slika je že bila odstranjena in ne obstaja več!")
                else alert(data.error)
              }
              else alert("Slika je bila uspešno izbrisana!")
            })
          }
        })
        this.questions[index]['image'] = ""
      },
      onFileChange(index,event) {
        var files = event.target.files || event.dataTransfer.files;
        if (!files.length)
          return;
        this.uploadImage(files[0],this.filesManager.folder,files[0].name,event);
      },
      uploadImage(file,folder,fileName,event) {
        filePath = folder+fileName
        var data = JSON.stringify({
          fileExist: filePath,
        });
        self=this;
        $.post("/api/edit_files", data, function(data) {
          if(data.error) {
            if(data.error == "eexist") {if(!confirm("Slika s tem imenom že obstaja! Ali jo želite zamenjati?")) return false;}
            else {alert(data.error); return false;}
          }
          var image = new Image();
          var reader = new FileReader();
          reader.onload = (e) => {
            var data = JSON.stringify({
              writeFile: filePath,
              file:e.target.result
            });
            $.post("/api/edit_files", data, function(data) {
              if(data.error == "eacces") alert("Datoteke ni bilo mogoče ustvariti saj nimate dodeljenih teh pravic! Obrnite se na administratorja!")
              else if(data.error) alert(data.error)
              else {self.filesManager.files.push(fileName);alert("Slika je bila uspešno naložena!");}
            })
          };
          reader.onprogress = function(event) {
              if (event.lengthComputable) {
                  self.progressBars.max = event.total;
                  self.progressBars.value = event.loaded;
              }
          };
          reader.readAsDataURL(file);
        })
      },
      createImage(file,fileName,i) {
        var data = JSON.stringify({
          fileExist: fileName,
        });
        self=this;
        $.post("/api/edit_questionnaire", data, function(data) {
          if(data.error) {
            if(data.error == "eexist") {if(!confirm("Slika s tem imenom že obstaja! Ali jo želite zamenjati?")) return false;}
            else {alert(data.error); return false;}
          }
          var image = new Image();
          var reader = new FileReader();
          reader.onload = (e) => {
            var data = JSON.stringify({
              writeFile: fileName,
              file:e.target.result
            });
            $.post("/api/edit_questionnaire", data, function(data) {
              if(data.error) alert(data.error)
              else alert("Slika je bila uspešno naložena!")
            })
          };
          reader.onprogress = function(event) {
              if (event.lengthComputable) {
                  self.progressBars[i].max = event.total;
                  self.progressBars[i].value = event.loaded;
              }
          };
          reader.readAsDataURL(file);
        })
      },
    }
  })

  function removeText() {
    $(this).prev("input").trigger('click');
  }
  function triggerClick() {
    $(this).children("input").trigger('click');
  }

{% endblock %}
