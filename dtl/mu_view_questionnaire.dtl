{% extends "mu_interface.dtl" %}

{% block container %}
  {% verbatim %}
    <!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">-->
    <div class = "row">
      <div class="col-12">
        <section id="question">
          <div class="row">
            <div class="col-sm-8">
              <h3>{{ name }}</h3>
              {{question.id}} / {{numOfQuestions}}
              Progress bar vprašanja: <progress :max="numOfQuestions" :value="question.id"></progress>
            </div>
            <div class="col-sm-4" v-if="scoring=='1'">
              <div>Hitrost procesiranja:</div>
              <div class="progress">
                <div class="progress-bar bg-green" role="progressbar" :style="{width: processingSpeedPercent +'%'}">{{processingSpeedPercent}}%</div>
              </div>
              <div>Spominske kapacitete:</div>
              <div class="progress">
                <div class="progress-bar bg-blue" role="progressbar" :style="{width: processingBrainCapacity +'%'}">{{processingBrainCapacity}}%</div>
              </div>
              <div>Teža možganov:</div>
              <div class="progress">
                <div class="progress-bar bg-gold" role="progressbar" :style="{width: processingBrainWeight +'%'}">{{processingBrainWeight}}%</div>
              </div>
            </div>
          </div>
          <div v-if="showBrainMotivations.length>0">
            <div v-for="(motivation, index) in showBrainMotivations" class="row">
              <div class="col-sm-3"><img class="w-100" src="static/images/smartBrain.png" alt="Možganček"></div>
              <div class="col-sm-9 well"><h3>{{motivation.text}}</h3></div>
            </div>
          </div>
          <template v-else class="row">
            <div v-if="question.answers_type == 'motivation'" class="row">
              <div class="col-sm-3"><img class="w-100" src="static/images/smartBrain.png" alt="Možganček"></div>
              <div class="col-sm-9 well"><h3>{{question.question}}</h3></div>
            </div>
            <div v-else class="row">
              <div v-if="typeof question['image'] != 'undefined' && question['image'] != ''" class="col-sm-4">
                  <img :src="encodeURI(question.folder + question.image)" :alt="question.image" class="w-100">
              </div>
              <div class="col-sm-8 well"><h3>{{question.question}}</h3></div>
              <form v-if="question.answers_type == 'selectOne'" class="col-sm-12">
                <label v-for="(answer, index) in question.answers" class="radio-inline">
                  <input type="radio" :value="index+1" v-model="answerId">{{answer.value}}
                </label>
              </form>
              <div v-if="question.answers_type == 'textarea'" class="form-group col-12"><br>
                  <textarea class="form-control" rows="5" id="comment" v-model="answerId" placeholder="Tukaj vpišite odgovor!"></textarea>
              </div>
            </div>
          </template>
          <button class="btn btn-success pull-right" v-on:click="nextQuestion()">Naprej</button>
          </div>
        </section>
      </div>
    </div>
  {% endverbatim %}
{% endblock %}
{% block footer_javascript %}

new Vue({
  el: '#question',
  data: {
    showBrainMotivations: [],
    brainMotivations: [],
    end: false,
    nextQuestionFlag: true,
    questionnaireId: {{ questionnaireId }},
    name: "{{ name }}",
    numOfQuestions: 0,
    question: "",
    pid: 0,
    processingSpeed: 0,
    brainCapacity: 0,
    brainWeight: 0,
    answerId: 0,
    scoring : {{scoring}},
    max_processingSpeed : {{max_processingSpeed}},
    max_brainCapacity : {{max_brainCapacity}},
    max_brainWeight : {{max_brainWeight}},
    image: "test.jpg"
  },
  computed: {
    processingSpeedPercent: function() {
      return Math.round(100/this.max_processingSpeed*this.processingSpeed)
    },
    processingBrainCapacity: function() {
      return Math.round(100/this.max_brainCapacity*this.brainCapacity)
    },
    processingBrainWeight: function() {
      return Math.round(100/this.max_brainWeight*this.brainWeight)
    }
  },
  mounted: function() {
      var userdata = JSON.stringify({
        "child": this.questionnaireId
      }); self=this
      $.postJSON("/api/questionnaire", userdata, function(data) {
        if(data.error) alert(data.error);
        else {
          self.pid=data.pid
          self.numOfQuestions=data.numOfQuestions
          self.nextQuestion()
        }
      })
  },
  methods: {
    nextQuestion: function() {
      if(this.question != "" && this.nextQuestionFlag && this.answerId > 0) {
        this.brainMotivations = this.question.answers[this.answerId-1]["brainMotivations"];
        this.nextQuestionFlag = false
      }
      if(this.question.answers!=undefined) {
          index=0; temp=[]
          while(this.brainMotivations.length>0) {
            temp.push(this.brainMotivations.shift())
            if(this.brainMotivations.length>0)
              if(temp[index++].special_id != this.brainMotivations[0].special_id)
                break;
          }
          if(temp.length==0) {
            if(this.end){
              window.history.replaceState(null, "test", location.protocol + '//' + location.host + "/")
              window.location.href = "/questionnaires"
              return false
            }
            this.nextQuestionFlag = true
          }
          this.showBrainMotivations = temp;
      }
      if(this.end) return false

      var data = JSON.stringify({
        "question": "next",
        "questionnaireId": this.questionnaireId,
        "questionId": this.question.id,
        "answerId": this.question.answers_type=="motivation"?-1:this.answerId,
        "pid" : this.pid,
        "scoring" : this.scoring
      });
      self=this
      $.postJSON("/api/questionnaire", data, function(data) {
        if(data.error) alert(data.error);
        else {
          if(data.question=="") {
            self.end = true
            self.processingSpeed=data.processingSpeed
            self.brainCapacity=data.brainCapacity
            self.brainWeight=data.brainWeight
            if(self.showBrainMotivations.length==0)
            {window.history.replaceState(null, "test", location.protocol + '//' + location.host + "/")
            window.location.href = "/questionnaires"}
          }
          else {
            try {
              if(data.question.answers != "undefined") {
                data.question.answers = JSON.parse(data.question.answers)
                self.answerId = 0
              }
              else {
                data.question["answers"] = []
                self.answerId = -1 // if we send 0 to server, server would return same question, if -1 server returns nextdefault question
              }
              if(data.question.answers_type=="textarea") self.answerId = ""
              self.question=data.question
              self.processingSpeed=data.processingSpeed
              self.brainCapacity=data.brainCapacity
              self.brainWeight=data.brainWeight
            } catch(ex) {
              alert("Napaka: "+data.question.answers)
            }
          }
        }
      })
    }
  }
})

{% endblock %}
